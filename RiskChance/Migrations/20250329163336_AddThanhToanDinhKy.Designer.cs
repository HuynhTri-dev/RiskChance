// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiskChance.Data;

#nullable disable

namespace RiskChance.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250329163336_AddThanhToanDinhKy")]
    partial class AddThanhToanDinhKy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RiskChance.Models.BinhLuanTinTuc", b =>
                {
                    b.Property<int>("IDBinhLuan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDBinhLuan"));

                    b.Property<float>("DiemDanhGia")
                        .HasColumnType("real");

                    b.Property<string>("IDNguoiDung")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IDTinTuc")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayBinhLuan")
                        .HasColumnType("datetime2");

                    b.Property<string>("NhanXet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDBinhLuan");

                    b.HasIndex("IDNguoiDung");

                    b.HasIndex("IDTinTuc");

                    b.ToTable("BinhLuanTinTuc");
                });

            modelBuilder.Entity("RiskChance.Models.DanhGiaStartup", b =>
                {
                    b.Property<int>("IDDanhGia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDanhGia"));

                    b.Property<float>("DiemDanhGia")
                        .HasColumnType("real");

                    b.Property<string>("IDNguoiDung")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IDStartup")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDanhGia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NhanXet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDanhGia");

                    b.HasIndex("IDNguoiDung");

                    b.HasIndex("IDStartup");

                    b.ToTable("DanhGiaStartup");
                });

            modelBuilder.Entity("RiskChance.Models.GiayTo", b =>
                {
                    b.Property<int>("IDGiayTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDGiayTo"));

                    b.Property<string>("FileGiayTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDStartup")
                        .HasColumnType("int");

                    b.Property<string>("LoaiFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenGiayTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDGiayTo");

                    b.HasIndex("IDStartup");

                    b.ToTable("GiayTo");
                });

            modelBuilder.Entity("RiskChance.Models.Hashtag", b =>
                {
                    b.Property<int>("IDHashtag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDHashtag"));

                    b.Property<string>("TenHashtag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDHashtag");

                    b.ToTable("Hashtag");
                });

            modelBuilder.Entity("RiskChance.Models.HopDongDauTu", b =>
                {
                    b.Property<int>("IDHopDong")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDHopDong"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNguoiDung")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IDStartup")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayKyKet")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PhanTramLoiNhuan")
                        .HasColumnType("float");

                    b.Property<bool?>("ThanhToan")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TongTien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrangThaiKyKet")
                        .HasColumnType("int");

                    b.HasKey("IDHopDong");

                    b.HasIndex("IDNguoiDung");

                    b.HasIndex("IDStartup");

                    b.ToTable("HopDongDauTu");
                });

            modelBuilder.Entity("RiskChance.Models.LinhVuc", b =>
                {
                    b.Property<int>("IDLinhVuc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDLinhVuc"));

                    b.Property<string>("TenLinhVuc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDLinhVuc");

                    b.ToTable("LinhVuc");
                });

            modelBuilder.Entity("RiskChance.Models.NguoiDung", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RiskChance.Models.Startup", b =>
                {
                    b.Property<int>("IDStartup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStartup"));

                    b.Property<int>("IDLinhVuc")
                        .HasColumnType("int");

                    b.Property<string>("IDNguoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MucTieu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PhanTramCoPhan")
                        .HasColumnType("float");

                    b.Property<string>("TenStartup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrangThaiXetDuyet")
                        .HasColumnType("int");

                    b.HasKey("IDStartup");

                    b.HasIndex("IDLinhVuc");

                    b.HasIndex("IDNguoiDung");

                    b.ToTable("Startup");
                });

            modelBuilder.Entity("RiskChance.Models.ThanhToanLoiNhuan", b =>
                {
                    b.Property<int>("IdThanhToan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdThanhToan"));

                    b.Property<int?>("HopDongDauTuIDHopDong")
                        .HasColumnType("int");

                    b.Property<int?>("IDHopDong")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayThanhToan")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SoTien")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdThanhToan");

                    b.HasIndex("HopDongDauTuIDHopDong");

                    b.HasIndex("IDHopDong");

                    b.ToTable("ThanhToanLoiNhuans");
                });

            modelBuilder.Entity("RiskChance.Models.ThongBao", b =>
                {
                    b.Property<int>("IDNoti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDNoti"));

                    b.Property<string>("IDNguoiDung")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NgayGui")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("IDNoti");

                    b.HasIndex("IDNguoiDung");

                    b.ToTable("ThongBao");
                });

            modelBuilder.Entity("RiskChance.Models.TinNhan", b =>
                {
                    b.Property<int>("IDTinNhan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTinNhan"));

                    b.Property<string>("IDNguoiGui")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDNguoiNhan")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDTinNhan");

                    b.HasIndex("IDNguoiGui");

                    b.HasIndex("IDNguoiNhan");

                    b.ToTable("TinNhan");
                });

            modelBuilder.Entity("RiskChance.Models.TinTuc", b =>
                {
                    b.Property<int>("IDTinTuc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTinTuc"));

                    b.Property<string>("IDNguoiDung")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImgTinTuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayDang")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrangThaiXetDuyet")
                        .HasColumnType("int");

                    b.HasKey("IDTinTuc");

                    b.HasIndex("IDNguoiDung");

                    b.ToTable("TinTuc");
                });

            modelBuilder.Entity("RiskChance.Models.TinTucHashtag", b =>
                {
                    b.Property<int>("IDTinTuc")
                        .HasColumnType("int");

                    b.Property<int>("IDHashtag")
                        .HasColumnType("int");

                    b.HasKey("IDTinTuc", "IDHashtag");

                    b.HasIndex("IDHashtag");

                    b.ToTable("TinTucHashtag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskChance.Models.NguoiDung", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiskChance.Models.BinhLuanTinTuc", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany("BinhLuanTinTucs")
                        .HasForeignKey("IDNguoiDung")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RiskChance.Models.TinTuc", "TinTuc")
                        .WithMany("BinhLuanTinTucs")
                        .HasForeignKey("IDTinTuc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NguoiDung");

                    b.Navigation("TinTuc");
                });

            modelBuilder.Entity("RiskChance.Models.DanhGiaStartup", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany()
                        .HasForeignKey("IDNguoiDung");

                    b.HasOne("RiskChance.Models.Startup", "Startup")
                        .WithMany("DanhGiaStartups")
                        .HasForeignKey("IDStartup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NguoiDung");

                    b.Navigation("Startup");
                });

            modelBuilder.Entity("RiskChance.Models.GiayTo", b =>
                {
                    b.HasOne("RiskChance.Models.Startup", "Startup")
                        .WithMany("GiayTos")
                        .HasForeignKey("IDStartup")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Startup");
                });

            modelBuilder.Entity("RiskChance.Models.HopDongDauTu", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany("HopDongDauTus")
                        .HasForeignKey("IDNguoiDung")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RiskChance.Models.Startup", "Startup")
                        .WithMany("HopDongDauTus")
                        .HasForeignKey("IDStartup")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NguoiDung");

                    b.Navigation("Startup");
                });

            modelBuilder.Entity("RiskChance.Models.Startup", b =>
                {
                    b.HasOne("RiskChance.Models.LinhVuc", "LinhVuc")
                        .WithMany("Startups")
                        .HasForeignKey("IDLinhVuc")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany("Startups")
                        .HasForeignKey("IDNguoiDung")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LinhVuc");

                    b.Navigation("NguoiDung");
                });

            modelBuilder.Entity("RiskChance.Models.ThanhToanLoiNhuan", b =>
                {
                    b.HasOne("RiskChance.Models.HopDongDauTu", "HopDongDauTu")
                        .WithMany("ThanhToanLoiNhuans")
                        .HasForeignKey("HopDongDauTuIDHopDong");

                    b.HasOne("RiskChance.Models.HopDongDauTu", null)
                        .WithMany()
                        .HasForeignKey("IDHopDong")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HopDongDauTu");
                });

            modelBuilder.Entity("RiskChance.Models.ThongBao", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany()
                        .HasForeignKey("IDNguoiDung");

                    b.Navigation("NguoiDung");
                });

            modelBuilder.Entity("RiskChance.Models.TinNhan", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiGui")
                        .WithMany()
                        .HasForeignKey("IDNguoiGui");

                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiNhan")
                        .WithMany()
                        .HasForeignKey("IDNguoiNhan");

                    b.Navigation("NguoiGui");

                    b.Navigation("NguoiNhan");
                });

            modelBuilder.Entity("RiskChance.Models.TinTuc", b =>
                {
                    b.HasOne("RiskChance.Models.NguoiDung", "NguoiDung")
                        .WithMany("TinTucs")
                        .HasForeignKey("IDNguoiDung")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NguoiDung");
                });

            modelBuilder.Entity("RiskChance.Models.TinTucHashtag", b =>
                {
                    b.HasOne("RiskChance.Models.Hashtag", "Hashtag")
                        .WithMany("TinTucHashtags")
                        .HasForeignKey("IDHashtag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskChance.Models.TinTuc", "TinTuc")
                        .WithMany("TinTucHashtags")
                        .HasForeignKey("IDTinTuc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("TinTuc");
                });

            modelBuilder.Entity("RiskChance.Models.Hashtag", b =>
                {
                    b.Navigation("TinTucHashtags");
                });

            modelBuilder.Entity("RiskChance.Models.HopDongDauTu", b =>
                {
                    b.Navigation("ThanhToanLoiNhuans");
                });

            modelBuilder.Entity("RiskChance.Models.LinhVuc", b =>
                {
                    b.Navigation("Startups");
                });

            modelBuilder.Entity("RiskChance.Models.NguoiDung", b =>
                {
                    b.Navigation("BinhLuanTinTucs");

                    b.Navigation("HopDongDauTus");

                    b.Navigation("Startups");

                    b.Navigation("TinTucs");
                });

            modelBuilder.Entity("RiskChance.Models.Startup", b =>
                {
                    b.Navigation("DanhGiaStartups");

                    b.Navigation("GiayTos");

                    b.Navigation("HopDongDauTus");
                });

            modelBuilder.Entity("RiskChance.Models.TinTuc", b =>
                {
                    b.Navigation("BinhLuanTinTucs");

                    b.Navigation("TinTucHashtags");
                });
#pragma warning restore 612, 618
        }
    }
}
